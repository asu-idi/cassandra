#!/usr/bin/env python

# Copyright (c) 2015-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the license found in the LICENSE file in
# the root directory of this source tree.

import json
import logging
import optparse
import os.path
import subprocess
import sys

# Set up the logging early on in the process.
logging.basicConfig(level=logging.INFO, format='%(message)s')

# Add the lib/ directory to $PYTHONPATH so library code can be imported.
sys.path.append(os.path.join(os.path.dirname(__file__), './lib'))

import ant
import util
import multiprocessing
import junitreport

parser = optparse.OptionParser(usage='usage: %prog [options] test_name',
                               description='Run Cassandra tests')
parser.add_option('-b', '--build', action='store_true', default=False, help='Run build step first')
parser.add_option('-l', '--list', action='store_true', default=False, help='List available test')
parser.add_option('-a', '--all', action='store_true', default=False, help='Run all test')
parser.add_option('-j', '--json', action='store_true', default=False, help='Print output as Json')
parser.add_option('-s', '--start', action='store', type="int", default=0, help='start index')
parser.add_option('-e', '--end', action='store', type="int", default=None, help='end index, if None: all the rest')
parser.add_option('--runners', action='store', default=multiprocessing.cpu_count()/2+1, help='Concurrent runners when running all tests')
parser.add_option('--timeout', action='store', default='300000', help='Timeout for single test when running all tests')


options, args = parser.parse_args(sys.argv[1:])

if options.list:
    tests = ant.list_unit_tests()
    if options.json:
        print(json.dumps(tests))
    else:
        for test in tests:
            print(test)
    sys.exit(0)

if not options.all:
    if len(args) == 0:
        logging.error('Need to specifiy a test name.')
        sys.exit(1)

    if options.build:
        ant.build()

    ant.run_test(args[0])
    sys.exit(0)

test_summary = os.path.join(util.PROJECT_ROOT, 'build/test/TESTS-TestSuites.xml')

if os.path.isfile(test_summary):
    os.remove(test_summary)

logging.info("Running tests from index {} to {} with {} runner and timeout {} ms...".format(
    options.start, options.end, options.runners, options.timeout))

try:
    ant.run_test_range(options.runners, options.timeout, options.start, options.end)
except subprocess.CalledProcessError:
    logging.error("ant test failed, run scripts/test_report to get list of failures")
    sys.exit(1)
